"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  FilePipeline: () => FilePipeline,
  filePathToKey: () => filePathToKey
});
module.exports = __toCommonJS(src_exports);

// src/filePipeline.ts
var import_glob = require("glob");
var import_node_path = require("node:path");
var filePathToKey = (path) => {
  return path.replace(/[\\\/]/g, "__").replace(/[^\w\d_\.]/g, "-");
};
var normalizeProcessCallbackReturn = (relativePath, result) => {
  if (typeof result === "string") {
    return [{ content: result, key: filePathToKey(relativePath) }];
  }
  return result.map((item, index) => {
    if (typeof item === "string") {
      return { content: item, key: filePathToKey(relativePath) + "_" + index };
    }
    return { content: item.content, key: item.key ?? filePathToKey(relativePath) + "_" + index };
  });
};
var FilePipeline = class {
  constructor(src, dest, opts = {}) {
    this.src = src;
    this.dest = dest;
    this.opts = opts;
  }
  /**
   * Processes each file in the source directory, applying a provided callback function to transform the file content.
   * Each file is read and provided to the callback in two forms: as a UTF-8 string and as raw bytes.
   * The callback can return either a string, an array of strings, or an array of objects containing the content and an optional key.
   * If a key is not provided, a default key is generated based on the file's relative path and an index (if needed).
   * The transformed content is then written to the destination directory under the generated or provided key.
   * 
   * @param callback - A function that takes a `CallbackParams` object and returns a `ProcessCallbackReturn`.
   *                   This function is expected to perform the necessary transformations on the file content.
   * @returns - A promise that resolves when all files have been processed.
   */
  async process(callback) {
    const { mkdir, readFile, writeFile, stat } = await import("node:fs/promises");
    const { emptyDir } = await import("fs-extra/esm");
    let globSrc = (0, import_node_path.join)(this.src, "**/*");
    if (this.opts.replace) {
      await emptyDir(this.dest);
    } else {
      await mkdir(this.dest, { recursive: true });
    }
    const files = await (0, import_glob.glob)(globSrc, { absolute: true });
    for (const filePath of files) {
      if ((await stat(filePath)).isDirectory()) {
        continue;
      }
      const relativeToSrc = (0, import_node_path.relative)(this.src, filePath);
      console.log(`processing ${relativeToSrc}`);
      const content = () => {
        return readFile(filePath, "utf8");
      };
      const contentBytes = () => {
        return readFile(filePath);
      };
      const result = await callback({
        content,
        contentBytes,
        path: relativeToSrc
      });
      const normalizedResult = normalizeProcessCallbackReturn(relativeToSrc, result);
      for (const { content: content2, key } of normalizedResult) {
        const destPath = (0, import_node_path.join)(this.dest, key);
        console.log(`writing ${destPath}`);
        await writeFile(destPath, content2);
      }
    }
  }
};
//# sourceMappingURL=index.cjs.map
