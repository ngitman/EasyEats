// src/index.ts
export * from "@opensouls/core";
export * from "@opensouls/soul";
var ALLOWED_RAG_FILE_EXTENSIONS = [
  ".js",
  ".ts",
  ".mdx",
  ".md",
  ".txt",
  ".json",
  ".yml",
  ".xml",
  ".html",
  ".tsx",
  ".jsx",
  ".py"
];
var defaultRagBucketName = (blueprint) => {
  return `__blueprint-rag-${blueprint}`;
};
var getHooks = () => {
  if (!globalThis.soul) {
    console.error("oops, no hooks", globalThis.soul);
  }
  return globalThis.soul.__hooks;
};
var useActions = () => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useActions called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useActions();
};
var useProcessManager = () => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useActions called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useProcessManager();
};
var usePerceptions = () => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("usePerceptions called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.usePerceptions();
};
var useProcessMemory = (initialValue) => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useProcessMemory called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useProcessMemory(initialValue);
};
var useSoulStore = () => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useSoulStore called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useSoulStore();
};
var useBlueprintStore = (bucketName) => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useBlueprintStore called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useBlueprintStore(bucketName);
};
var useOrganizationStore = (bucketName) => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useOrganizationStore called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useOrganizationStore(bucketName);
};
var useSoulMemory = (name, initialValue) => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useSoulMemory called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useSoulMemory(name, initialValue);
};
var useRag = (bucketName) => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useRag called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useRag(bucketName);
};
var useTool = (toolName) => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useTool called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useTool(toolName);
};
export {
  ALLOWED_RAG_FILE_EXTENSIONS,
  defaultRagBucketName,
  useActions,
  useBlueprintStore,
  useOrganizationStore,
  usePerceptions,
  useProcessManager,
  useProcessMemory,
  useRag,
  useSoulMemory,
  useSoulStore,
  useTool
};
//# sourceMappingURL=index.mjs.map
