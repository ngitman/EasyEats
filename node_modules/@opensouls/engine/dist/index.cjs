"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ALLOWED_RAG_FILE_EXTENSIONS: () => ALLOWED_RAG_FILE_EXTENSIONS,
  defaultRagBucketName: () => defaultRagBucketName,
  useActions: () => useActions,
  useBlueprintStore: () => useBlueprintStore,
  useOrganizationStore: () => useOrganizationStore,
  usePerceptions: () => usePerceptions,
  useProcessManager: () => useProcessManager,
  useProcessMemory: () => useProcessMemory,
  useRag: () => useRag,
  useSoulMemory: () => useSoulMemory,
  useSoulStore: () => useSoulStore,
  useTool: () => useTool
});
module.exports = __toCommonJS(src_exports);
__reExport(src_exports, require("@opensouls/core"), module.exports);
__reExport(src_exports, require("@opensouls/soul"), module.exports);
var ALLOWED_RAG_FILE_EXTENSIONS = [
  ".js",
  ".ts",
  ".mdx",
  ".md",
  ".txt",
  ".json",
  ".yml",
  ".xml",
  ".html",
  ".tsx",
  ".jsx",
  ".py"
];
var defaultRagBucketName = (blueprint) => {
  return `__blueprint-rag-${blueprint}`;
};
var getHooks = () => {
  if (!globalThis.soul) {
    console.error("oops, no hooks", globalThis.soul);
  }
  return globalThis.soul.__hooks;
};
var useActions = () => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useActions called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useActions();
};
var useProcessManager = () => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useActions called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useProcessManager();
};
var usePerceptions = () => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("usePerceptions called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.usePerceptions();
};
var useProcessMemory = (initialValue) => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useProcessMemory called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useProcessMemory(initialValue);
};
var useSoulStore = () => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useSoulStore called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useSoulStore();
};
var useBlueprintStore = (bucketName) => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useBlueprintStore called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useBlueprintStore(bucketName);
};
var useOrganizationStore = (bucketName) => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useOrganizationStore called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useOrganizationStore(bucketName);
};
var useSoulMemory = (name, initialValue) => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useSoulMemory called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useSoulMemory(name, initialValue);
};
var useRag = (bucketName) => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useRag called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useRag(bucketName);
};
var useTool = (toolName) => {
  const hooks = getHooks();
  if (!hooks)
    throw new Error("useTool called when no hooks are available. Are you executing this code on the SOUL ENGINE?");
  return hooks.useTool(toolName);
};
//# sourceMappingURL=index.cjs.map
