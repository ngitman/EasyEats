import { DeveloperDispatchedPerception } from '@opensouls/core';
import { EventEmitter } from 'eventemitter3';
import { EventLogDoc } from '@opensouls/core';
import { HocuspocusProviderWebsocket } from '@hocuspocus/provider';
import { HocuspocusProviderWebsocketConfiguration } from '@hocuspocus/provider';
import { InteractionRequest } from '@opensouls/core';
import { Json } from '@opensouls/core';
import { SoulEnvironment } from '@opensouls/core';
import { SoulEvent } from '@opensouls/core';
import { syncedStore } from '@syncedstore/core';

/**
 * `ActionEvent` is designed to be isomorphic between streaming and non-streaming actions.
 * When an event is not streaming,
 * the `content` will be immediately available as a `Promise<string>`. The `stream`
 * will be an `AsyncIterable<string>` that yields a single value if the event
 * is not streaming, allowing for consistent handling of event data.
 *
 * If the event *is* streaming then content will resolve when the stream is complete.
 */
export declare type ActionEvent = {
    content: () => Promise<string>;
    isStreaming: boolean;
    stream: () => AsyncIterable<string>;
    action: string;
    name?: string;
    _metadata: InteractionRequest['_metadata'];
    _timestamp: InteractionRequest['_timestamp'];
    perception: InteractionRequest;
    interactionRequest: InteractionRequest;
};

export declare enum Actions {
    SAYS = "says"
}

export declare enum Events {
    newSoulEvent = "newSoulEvent",
    dispatchExternalPerception = "dispatchExternalPerception",
    compileError = "compileError",
    saveVersion = "saveVersion",
    revertDoc = "revertDoc",
    setEnvironment = "setEnvironment",
    newPerception = "newPerception",
    newInteractionRequest = "newInteractionRequest"
}

export declare const getConnectedWebsocket: (organizationSlug: string, local: boolean, debug: boolean, opts?: Partial<HocuspocusProviderWebsocketConfiguration>) => HocuspocusProviderWebsocket;

export { InteractionRequest }

export declare function said(entity: string, content: string): DeveloperDispatchedPerception;

export declare class Soul extends EventEmitter<SoulEvents> {
    soulId: string;
    private blueprint;
    private connection?;
    private debug;
    private environment;
    private errorHandler;
    private local;
    private organizationSlug;
    private selfCreatedWebsocket;
    private token;
    private version;
    private toolHandler;
    private websocket?;
    constructor({ debug, local, organization, soulId, blueprint, token, version, webSocket, environment }: SoulOpts);
    get events(): SoulEvent[];
    get store(): ReturnType<typeof syncedEventStore>;
    get connected(): boolean | undefined;
    connect(): Promise<string>;
    disconnect(): Promise<void>;
    reset(): Promise<void>;
    registerTool<Params = Json, Response = Json>(tool: string, handler: (params: Params) => Promise<Response>): void;
    dispatch(perception: DeveloperDispatchedPerception): Promise<void>;
    onError(handler: (error: Error) => void): void;
    setEnvironment(environment: SoulEnvironment): void;
    private actionEventFromInteractionRequest;
    private debugUrl;
    private eventFromPayload;
    private getProvider;
    private handleStatelessMessage;
}

export declare type SoulEvents = {
    [K in Actions]: (evt: ActionEvent) => void;
} & {
    [key: string]: (evt: ActionEvent) => void;
} & {
    newPerception: (evt: InteractionRequest) => void;
    newInteractionRequest: (evt: InteractionRequest) => void;
    newSoulEvent: (evt: SoulEvent) => void;
};

export declare interface SoulOpts {
    local?: boolean;
    organization: string;
    soulId?: string;
    blueprint: string;
    token?: string;
    version?: string;
    webSocket?: HocuspocusProviderWebsocket;
    environment?: SoulEnvironment;
    debug?: boolean;
}

export declare const syncedEventStore: () => ReturnType<typeof syncedStore<EventLogDoc>>;

export declare const websocketUrl: (organizationSlug: string, local: boolean, debug: boolean) => string;

export { }
