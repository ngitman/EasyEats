{
  "version": 3,
  "sources": ["../src/index.ts", "../src/config.ts", "../src/commands/apikey.ts", "../src/commands/dev.ts", "../src/debugChat/file-poster.ts", "../src/fileSystem/file-watcher.ts", "../src/sockets/soul-engine-socket.ts", "../src/login.ts", "../src/rag/rag-file-poster.ts", "../src/fileSystem/recursive-reader.ts", "../src/packageParser.ts", "../src/commands/init.ts", "../src/commands/logout.ts", "../src/commands/login.ts", "../src/commands/rag/push.ts", "../src/commands/rag/watch.ts", "../src/commands/rag/index.ts", "../src/commands/install.ts", "../src/communityInstaller.ts", "../src/stores/pull.ts", "../src/stores/hash.ts", "../src/commands/stores/pull.ts", "../src/stores/push.ts", "../src/commands/stores/push.ts", "../src/commands/stores/index.ts", "../src/customModels/customModel.ts", "../src/commands/custom-models/list.ts", "../src/commands/custom-models/createModel.ts", "../src/commands/custom-models/index.ts", "../src/commands/index.ts"],
  "sourcesContent": ["import { Command } from \"commander\";\nimport { setupCLI } from \"./commands/index.js\";\n\nexport const run = () => {\n  const program = new Command();\n  setupCLI(program);\n  return program.parseAsync()\n}\n", "\nexport interface GlobalConfig {\n  apiKey: string\n  organization: string\n}\n\n/**\n * This class is designed to provide a consistent API similar to the 'conf' package,\n * but it specifically handles configuration set directly (in this case environment variables)\n */\nclass EnvironmentVariableConfig {\n  constructor(private config: GlobalConfig) {}\n\n  get(key: keyof GlobalConfig) {\n    return this.config[key]\n  }\n\n  set(key: string, value: string) {\n    throw new Error('set undefined')\n  }\n}\n\nexport const getConfig = async (isLocal = false) => {\n  // this is the one we expect pasted from the /auth/cli page.\n  if (process.env.SOUL_ENGINE_CONFIG) {\n    console.log(\"login with config\")\n    const parsed = JSON.parse(Buffer.from(process.env.SOUL_ENGINE_CONFIG, \"base64\").toString(\"utf8\"))\n    return new EnvironmentVariableConfig({\n      apiKey: parsed.apiKey,\n      organization: parsed.organization.slug,\n    })\n  }\n\n  if (process.env.SOUL_ENGINE_API_KEY && process.env.SOUL_ENGINE_ORGANIZATION) {\n    return new EnvironmentVariableConfig({\n      apiKey: process.env.SOUL_ENGINE_API_KEY,\n      organization: process.env.SOUL_ENGINE_ORGANIZATION,\n    })\n  }\n\n  const { default: Conf} = await import(\"conf\")\n  const projectName = isLocal ? \"soul-engine-cli-local\" : \"soul-engine-cli\"\n  return new Conf<GlobalConfig>({ projectName })\n}\n", "import { Command } from 'commander'\nimport { getConfig } from '../config.js'\n\nconst createApiKeyCommand = (program: Command) => {\n  program\n    .command('apikey')\n    .description('print your api key to the terminal. This command is useful for connecting to a debug chat.')\n    .option('-l, --local', 'use the local config file', false)\n    .option(\"--json\", \"output the api key and organization as json\", false)\n    .action(async (options: { local: boolean, json: boolean }) => {\n      const globalConfig = await getConfig(options.local)\n      const org = globalConfig.get(\"organization\")\n      const apiKey = globalConfig.get(\"apiKey\")\n      \n      if (options.json) {\n        console.log(JSON.stringify({\n          apiKey: apiKey,\n          organization: org\n        }))\n        return\n      }\n      console.log(\"API KEY:\", apiKey)\n      console.log(\"ORGANIZATION: \", org)\n    })\n}\n\nexport default createApiKeyCommand\n", "import { existsSync, readFileSync } from 'node:fs'\nimport path from \"node:path\"\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { getConfig } from '../config.js'\nimport { FilePoster } from '../debugChat/file-poster.js'\nimport { SoulConfig } from '@opensouls/engine'\nimport { handleLogin } from '../login.js'\nimport { RagPoster } from '../rag/rag-file-poster.js'\nimport { Command } from 'commander'\n\nconst createDev = (program: Command) => {\n  program\n    .command('dev')\n    .description('Hot reload your code for remote chat debug')\n    .option('-l, --local', '(Soul Engine developers only) use a local soul engine server', false)\n    .option('--once', 'Only post the code once, do not watch for changes', false)\n    .option(\"-n, --noopen\", 'Do not automatically open the browser', false)\n    .option(\"--id <id>\", 'Set the SoulId, otherwise assigns a UUID', uuidv4())\n    .action(async ({ local, once, noopen, id }) => {\n      await handleLogin(local)\n      const globalConfig = await getConfig(local)\n\n      const organization = globalConfig.get(\"organization\")\n      if (!organization) {\n        throw new Error(\"missing organization, even after login\")\n      }\n\n      const { default: open } = await import('open');\n\n      let soulConfig: SoulConfig\n\n      const optionalConfigPath = path.join(process.cwd(), \"soul-engine.json\")\n      \n      if (existsSync(optionalConfigPath)) {\n        soulConfig = JSON.parse(readFileSync(optionalConfigPath, { encoding: \"utf8\" }))\n      } else {\n        // parse the package.json and extract the name\n        const packageJsonPath = path.join(process.cwd(), \"package.json\")\n        const packageJson = JSON.parse(readFileSync(packageJsonPath, { encoding: \"utf8\" }))\n\n        soulConfig = {\n          soul: packageJson.name,\n          paths: [\n            \"package.json\",\n            \"soul\",\n          ],\n        }\n      }\n\n      const apiKey = globalConfig.get(\"apiKey\") as string|undefined || \"TOOD: fix me\"\n   \n      const watcher = new FilePoster({\n        apiKey,\n        paths: soulConfig.paths ?? [\".\"],\n        root: soulConfig.path ?? \".\",\n        organizationSlug: organization,\n        blueprint: soulConfig.soul,\n        local,\n      })\n\n    let resolve: () => void = () => {}\n    const synedOncePromise = new Promise<void>((r) => { resolve = r })  \n\n    // eslint-disable-next-line no-warning-comments\n    // TODO: this is a dumb quick fix to make sure we see bad things happening. \"stateless\" is a poor name for this event.\n    watcher.once(\"stateless\", () => {\n      if (once) {\n        console.log(\"posted\")\n        resolve()\n        return\n      }\n\n      console.log('SoulId:', id);\n      const url = local ? `http://localhost:3000/chats/${organization}/${soulConfig.soul}/${id}` : `https://souls.chat/chats/${organization}/${soulConfig.soul}/${id}`\n\n      console.log(\"debug chat available at\", url)\n\n      if (!noopen) {\n        open(url)\n      }\n    })\n\n    await watcher.start()\n\n    if (once) {\n      await synedOncePromise\n      return\n    }\n\n\n    const keepAliveInterval = setInterval(() => {\n      // do nothing\n    }, 60 * 1000); // keep process alive\n\n    const ragDirPath = path.join(process.cwd(), \"rag\");\n    if (existsSync(ragDirPath)) {\n      const ragFilePoster = RagPoster.createWithDefaultConfig({\n        path: ragDirPath,\n        organization,\n        local: local,\n        apiKey,\n      })\n      ragFilePoster.watch();\n    }\n\n    return new Promise<void>((resolve) => {\n      console.log(\"watching your files...\")\n      process.on('SIGINT', () => {\n        console.log('Received SIGINT. Exiting.');\n        clearInterval(keepAliveInterval);\n        watcher.stop()\n        resolve();\n      });\n    });\n  })\n}\n\nexport default createDev\n", "import { HocuspocusProvider, HocuspocusProviderWebsocket } from \"@hocuspocus/provider\";\nimport { getYjsDoc, syncedStore } from \"@syncedstore/core\";\nimport { EventEmitter } from \"eventemitter3\";\n\nimport { CodeFile, FileWatcher } from \"../fileSystem/file-watcher.js\";\nimport { getConnectedWebsocket } from \"../sockets/soul-engine-socket.js\";\n\ninterface FilePosterOpts {\n  apiKey: string\n  paths: string[]\n\n  organizationSlug: string\n  blueprint: string\n\n  local?: boolean\n\n  root: string\n}\n\nconst docShape = {\n  files: {} as Record<string,string> // relativePath, conent\n}\n\nconst syncedFilesDoc = () => syncedStore(docShape)\n\ninterface FilePosterEvents {\n  fileUpdate: (files: CodeFile[]) => void\n  stateless: () => void\n}\n\n// eslint-disable-next-line unicorn/prefer-event-target\nexport class FilePoster extends EventEmitter<FilePosterEvents> {\n  private _connection?: { doc: ReturnType<typeof syncedFilesDoc>, provider: HocuspocusProvider, socket: HocuspocusProviderWebsocket }\n  private apiKey: string\n  private connectionOpts\n\n  private firstSync = true\n\n  private watcher: FileWatcher\n\n  constructor({ apiKey, paths, root, organizationSlug, blueprint, local }: FilePosterOpts) {\n    super()\n    this.watcher = new FileWatcher({ paths, root })\n    this.watcher.onFileUpdate = (files) => {\n      this.onFileUpdate(files)\n    }\n\n    this.connectionOpts = {\n      organizationSlug,\n      blueprint,\n      local,\n    }\n    this.apiKey = apiKey\n  }\n\n  async start() {\n    await this.setupProvider()\n    return this.watcher.start()\n  }\n\n  stop() {\n    if (!this._connection) {\n      return\n    }\n\n    this._connection.provider.destroy()\n    this._connection.socket.destroy()\n  }\n\n  private async onFileUpdate(files: CodeFile[]) {\n    console.log(\"updating:\", files.map((f) => f.relativePath))\n    if (!this._connection) {\n      throw new Error(\"missing connection\")\n    }\n\n    const { doc, provider } = this._connection\n\n    getYjsDoc(doc).transact(() => {\n      // delete everything in the doc keys\n      // notice we're in a transaction so that won't really sync\n      // only the changes after we're done modifying\n      if (this.firstSync) {\n        for (const key of Object.keys(doc.files)) {\n          delete doc.files[key]\n        }\n      }\n\n      this.firstSync = false\n\n      for (const file of files) {\n        if (file.removed) {\n          delete doc.files[file.relativePath]\n          continue\n        }\n\n        doc.files[file.relativePath] = file.content\n      }\n    })\n\n    provider.sendStateless(JSON.stringify({\n      event: \"codeSync\",\n      data: \"\",\n    }))\n    this.emit(\"fileUpdate\", files)\n  }\n\n  private async setupProvider() {\n    const { default: ws } = await import(\"ws\");\n\n    const { organizationSlug, blueprint, local } = this.connectionOpts\n    const docName = `soul-source-doc.${organizationSlug}.${blueprint}`\n\n    const doc = syncedFilesDoc()\n    \n    const socket = getConnectedWebsocket(organizationSlug, Boolean(local), false, { WebSocketPolyfill: ws })\n\n    // only return the connection after the initial sync with the server.\n    return new Promise((resolve, reject) => {\n      const provider = new HocuspocusProvider({\n        document: getYjsDoc(doc),\n        name: docName,\n        async onAuthenticationFailed({ reason }) {\n          console.error(\"authentication failed\", reason)\n          reject(reason)\n        },\n        onStateless: async ({ payload }) => {\n          this.emit(\"stateless\")\n          console.log(new Date(), payload)\n        },\n        onSynced: async () => {\n          this._connection = {\n            doc,\n            provider,\n            socket,\n          }\n          resolve(this._connection)\n        },\n        token: this.apiKey,\n        websocketProvider: socket,\n      });\n    })\n  }\n}\n", "import { watch } from \"chokidar\"\nimport fs, { readdirSync } from \"node:fs\"\nimport path, { basename, dirname, join } from \"node:path\"\nimport process from \"node:process\"\n\nexport interface CodeFile {\n  content: string\n  relativePath: string\n  removed: boolean\n}\n\nexport interface FileWatcherOpts {\n  paths: string[]\n  root: string\n  allowedExtensions?: string[]\n}\nconst caseSensitiveExistsSync = (path: string) => readdirSync(dirname(path)).includes(basename(path))\n\nexport class FileWatcher {\n  onFileUpdate?: (files: CodeFile[]) => void\n\n  private paths: string[]\n  private root: string\n\n  constructor(private options: FileWatcherOpts) {\n    this.paths = options.paths\n    this.root = options.root\n    console.log(\"paths:\", this.paths, \"cwd\", this.root)\n    console.log('Watcher constructor');\n  }\n\n  async start() {\n    return this.watch()\n  }\n\n  private async callOnUpdate(files: string[]) {\n    if (!this.onFileUpdate) {\n      return\n    }\n\n    this.onFileUpdate(files.map((filePath) => {\n      try {\n        console.log(\"file update:\", filePath)\n\n        if (filePath === \"\") {\n          return null\n        }\n\n        const fullPath = join(this.root, filePath)\n        const remotePath = filePath.split(path.sep).join(\"/\")\n\n        const exists = caseSensitiveExistsSync(fullPath)\n\n        if (!exists) {\n          return {\n            content: \"\",\n            relativePath: remotePath,\n            removed: true,\n          }\n        }\n\n        const stat = fs.statSync(fullPath)\n        if (!stat.isFile()) {\n          return null\n        }\n\n        return {\n          content: fs.readFileSync(fullPath, { encoding: \"utf8\" }),\n          relativePath: remotePath,\n        }\n      } catch (error) {\n        console.error(\"error reading file:\", filePath, error)\n        throw error\n      }\n\n    }).filter(Boolean) as CodeFile[])\n  }\n\n  private watch() {\n    let timeoutId: NodeJS.Timeout | null = null;\n    const changedFiles: Set<string> = new Set();\n\n    const scheduleUpdate = (filepath: string) => {\n      if (this.options.allowedExtensions && !this.options.allowedExtensions.includes(path.extname(filepath))) {\n        console.warn(\"Ignoring file\", filepath);\n        return;\n      }\n\n      changedFiles.add(filepath);\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n\n      timeoutId = setTimeout(() => {\n        timeoutId = null;\n        this.callOnUpdate([...changedFiles]);\n        changedFiles.clear();\n      }, 300);\n    };\n\n    const watcher = watch(this.paths, {\n      ignored: [\n        /(^|[/\\\\])\\../, // ignore dotfiles\n        /node_modules/, // ignore node_modules\n        /tsconfig\\.json/, // ignore tsconfig.json\n      ],\n      persistent: true,\n      cwd: this.root,\n    });\n\n    watcher\n      .on('add', path => console.log(`File ${path} has been added`))\n      .on('change', path => console.log(`File ${path} has been changed`))\n      .on('unlink', path => console.log(`File ${path} has been removed`))\n      .on('addDir', path => console.log(`Directory ${path} has been added`))\n      .on('unlinkDir', path => console.log(`Directory ${path} has been removed`))\n      .on('error', error => console.error(`Watcher error: ${error}`))\n      .on('ready', () => console.log('Initial scan complete. Ready for changes'))\n      .on('all', (event, path) => {\n        scheduleUpdate(path);\n      });\n\n    process.once('SIGINT', () => {\n      watcher.close();\n    })\n\n    return watcher;\n  }\n}\n", "import { HocuspocusProviderWebsocket, HocuspocusProviderWebsocketConfiguration } from \"@hocuspocus/provider\"\n\nexport const websocketUrl = (organizationSlug: string, local: boolean, debug: boolean) => {\n  const urlpath = debug ? \"debug-chat\" : \"experience\"\n\n  return local ?\n    `ws://localhost:4000/${organizationSlug}/${urlpath}` :\n    `wss://servers.souls.chat/${organizationSlug}/${urlpath}`\n}\n\nexport const getConnectedWebsocket = (\n  organizationSlug: string,\n  local: boolean,\n  debug: boolean, \n  opts: Partial<HocuspocusProviderWebsocketConfiguration> = {}\n) => new HocuspocusProviderWebsocket({\n    url: websocketUrl(organizationSlug, local, debug),\n    ...opts,\n  })\n", "import { getConfig } from \"./config.js\"\nimport readline from 'node:readline/promises';\nimport { stdin as input, stdout as output } from 'node:process';\n\nexport const handleLogin = async (local: boolean, force = false) => {\n  const rl = readline.createInterface({ input, output });\n\n  const globalConfig = await getConfig(local)\n\n  if (globalConfig.get(\"apiKey\") && !force) {\n    return\n  }\n\n  const { default: open } = await import(\"open\")\n\n  const url = local ? \"http://localhost:3000/auth/cli\" : \"https://souls.chat/auth/cli\"\n  open(url)\n\n\n  console.log(`Opening ${url} in your browser. If the browser does not open, then please visit manually.`)\n\n\n  const configInput = await rl.question('Please login to the soul engine and then paste the config here: ');\n  rl.close();\n\n  const responses = { configInput };\n\n  const pasted = responses.configInput\n  const pastedConfig = JSON.parse(Buffer.from(pasted, \"base64\").toString(\"utf8\"))\n  // console.log(\"pastedConfig\", pastedConfig)\n\n  console.log(`logged into ${pastedConfig.organization.name} as ${pastedConfig.user.email}`)\n  globalConfig.set(\"apiKey\", pastedConfig.apiKey)\n  globalConfig.set(\"organization\", pastedConfig.organization.slug)\n}\n", "import fetch from \"cross-fetch\"\nimport fs, { existsSync, readFileSync } from \"node:fs\";\nimport { join, relative } from \"node:path\";\n\nimport { FileWatcher } from \"../fileSystem/file-watcher.js\";\nimport { readDirRecursive } from \"../fileSystem/recursive-reader.js\";\nimport { ALLOWED_RAG_FILE_EXTENSIONS, RagConfigfile, RagIngestionBody, defaultRagBucketName } from \"@opensouls/engine\";\nimport { parsedPackageJson } from \"../packageParser.js\";\n\ninterface RagPosterOpts {\n  apiKey?: string\n  path: string\n  url: string\n}\n\ninterface RagFile {\n  content: Buffer\n  relativePath: string\n}\n\ninterface CreateWithDefaultConfigOpts {\n  path: string\n  organization: string\n  local: boolean\n  apiKey: string\n}\n\n\nexport class RagPoster {\n  private apiKey: string\n  private path: string\n  private url: string\n\n  private watcher?: FileWatcher\n\n  constructor({ apiKey, path, url }: RagPosterOpts) {\n    this.url = url\n    console.log(\"file poster url:\", this.url)\n    this.apiKey = apiKey || \"\"\n    this.path = path\n  }\n\n  static createWithDefaultConfig({ path, organization, local, apiKey }: CreateWithDefaultConfigOpts) {\n\n    const ragDir = path\n\n    const pathToRagConfig = join(ragDir, \"rag.json\");\n    const pathToPackageJson = join(\".\", \"package.json\");\n    const ragConfigExists = existsSync(pathToRagConfig);\n    const packageJsonExists = existsSync(pathToPackageJson);\n\n    if (!ragConfigExists && !packageJsonExists) {\n      throw new Error('Neither rag.json nor package.json exists in the specified directory.');\n    }\n\n    let bucketName;\n    if (ragConfigExists) {\n      const ragConfig: RagConfigfile = JSON.parse(readFileSync(pathToRagConfig, { encoding: \"utf8\" }));\n      bucketName = ragConfig.bucket;\n    } else {\n      bucketName = defaultRagBucketName(parsedPackageJson().name);\n    }\n\n    console.log(\"RAG bucket name:\", bucketName)\n\n    const url = local ?\n      `http://localhost:4000/api/${organization}/rag-ingest/${bucketName}` :\n      `https://servers.souls.chat/api/${organization}/rag-ingest/${bucketName}`\n\n    return new RagPoster({\n      apiKey,\n      path: ragDir,\n      url,\n    })\n  }\n\n  async push() {\n    return this.pushFiles(...readDirRecursive(this.path))\n  }\n\n  async pushFiles(...paths: string[]) {\n    const files: RagFile[] = paths.map((path) => {\n      const relativePath = relative(this.path, path)\n      return {\n        content: fs.readFileSync(path),\n        relativePath,\n      }\n    }).filter((f) => !f.relativePath.includes(\"rag.json\"))\n\n    const body: RagIngestionBody[] = files.map((f) => ({\n      content: f.content.toString(\"base64\"),\n      rootKey: f.relativePath,\n    }))\n    console.log(\"RAG: posting\", files.map((f) => f.relativePath))\n\n    const controller = new AbortController()\n\n    const timeout = setTimeout(() => {\n      console.log(\"timeout\")\n      controller.abort()\n    }, 60_000)\n\n    const response = await fetch(this.url, {\n      body: JSON.stringify(body),\n      headers: {\n        \"Authorization\": `Bearer ${this.apiKey}`,\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      signal: controller.signal,\n    })\n    clearTimeout(timeout)\n\n    if (!response.ok) {\n      console.error(\"RAG: failed to post\", response.status, response.statusText)\n    }\n\n    console.log(\"RAG: uploaded for processing\")\n  }\n\n  watch() {\n    this.watcher = new FileWatcher({ paths: [join(\"**\", \"*\")], root: this.path, allowedExtensions: ALLOWED_RAG_FILE_EXTENSIONS })\n    this.watcher.onFileUpdate = (files) => {\n      // does not currently handle removals\n      const liveFiles = files.filter((f) => !f.removed).map((f) => join(this.path, f.relativePath))\n      this.pushFiles(...liveFiles)\n    }\n\n    this.watcher.start()\n  }\n}\n", "import fs, { PathLike } from \"node:fs\";\nimport path from \"node:path\";\n\nexport function readDirRecursive(directory: PathLike ) {\n  let results:string[] = [];\n  const list = fs.readdirSync(directory);\n  for (const listFile of list) {\n    const file = path.join(directory.toString(), listFile);\n    const stat = fs.statSync(file);\n    if (stat && stat.isDirectory()) {\n      /* Recurse into a subdirectory */\n      results = [...results, ...readDirRecursive(file)];\n    } else {\n      /* Is a file */\n      results.push(file);\n    }\n  }\n\n  return results;\n}", "import { join } from \"node:path\"\nimport { readFileSync } from \"node:fs\"\n\nexport interface PackageJsonWithName {\n  name: string\n}\n\nexport const parsedPackageJson = (): PackageJsonWithName => {\n  const packageJsonPath = join(\".\", \"package.json\")\n  return JSON.parse(readFileSync(packageJsonPath, { encoding: \"utf8\" })) as PackageJsonWithName\n}\n", "import { Command } from \"commander\"\nimport { globSync } from \"glob\"\nimport Handlebars from \"handlebars\"\nimport { readFileSync, renameSync, rmSync, statSync, writeFileSync } from 'node:fs'\nimport { join, dirname } from 'node:path'\nimport { fileURLToPath } from 'node:url';\nimport fsExtra from \"fs-extra\"\n\nimport { getConfig } from '../config.js'\nimport { handleLogin } from '../login.js'\n\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst templatePath = __dirname.endsWith(\"dist\") ? join(__dirname, '..', 'template') : join(__dirname, '..', '..', 'template');\n\nconst createInit = (program: Command) => {\n  program\n    .command('init <projectName>')\n    .description('Create a new soul for the OPEN SOULS soul engine.')\n    .option('-l, --local', '', false)\n    .action(async (projectName: string, options: { local: boolean }) => {\n      await handleLogin(options.local)\n\n      const config = await getConfig()\n\n      if (!projectName) {\n        console.log(\"missing project name\")\n        return\n      }\n\n      const safeProjectName = projectName.replaceAll(/\\s/g, \"-\").toLowerCase()\n      const lowerCaseEntityName = safeProjectName.split(\"-\")[0]\n      const entityName = lowerCaseEntityName.charAt(0).toUpperCase() + lowerCaseEntityName.slice(1)\n\n      const { $ } = await import('execa');\n      console.log(\"cloning template...\")\n\n      await fsExtra.copy(templatePath, safeProjectName)\n\n      console.log(\"Template copied successfully.\");\n\n      process.chdir(join('.', safeProjectName))\n\n      await $`git init`\n      // glob files need to use the \"/\" even on windows machines, so cannot use path.join here.\n      const files = globSync(`${process.cwd()}/**/*`, { dot: true, ignore: \"node_modules/**/*\" })\n      const organization = config.get(\"organization\") || \"public\"\n      console.log(\"using soul-engine organization:\", organization)\n      const data = {\n        name: projectName,\n        slug: safeProjectName,\n        entityName,\n      }\n      console.log(\"processing files...\")\n      for (const file of files) {\n        try {\n          if (file.includes(\"node_modules\")) continue;\n          if (file.includes(\"/.git/\")) continue;\n          const stat = statSync(file)\n          if (stat.isDirectory()) continue;\n\n          const rawFile = readFileSync(file, { encoding: \"utf8\" })\n          const template = Handlebars.compile(rawFile)\n          writeFileSync(file, template(data))\n\n          if (file.includes(\"{{\")) {\n            // then it's a file where the name is templated,\n            // we move it into place.\n            const templateFileName = Handlebars.compile(file.replace(\"\\\\\", \"\\\\\\\\\"));\n            const newFileName = templateFileName(data);\n            renameSync(file, newFileName);\n          }\n        } catch (error: unknown) {\n          console.error(\"skipping...\", file, error)\n          // throw error\n        }\n      }\n\n      console.log(\"npm install...\")\n      await $`npm install`\n      console.log(\"success.\")\n      return\n    })\n}\n\nexport default createInit\n", "import { Command } from 'commander'\nimport { getConfig } from '../config.js'\n\nconst createLogout = (program: Command) => {\n  program\n    .command('logout')\n    .description('Logout of the Soul Engine to remove your api key and organization.')\n    .option('-l, --local', 'use the local config file', false)\n    .action(async ({ local }) => {\n      const globalConfig = await getConfig(local)\n      globalConfig.set(\"apiKey\", \"\")\n      globalConfig.set(\"organization\", \"\")\n    })\n\n}\n\nexport default createLogout", "import { Command } from 'commander'\nimport { handleLogin } from '../login.js'\n\nconst createLogin = (program: Command) => {\n  program\n    .command('login')\n    .description('Login to the Soul Engine to provide this CLI with an api key and organization.')\n    .option('-l, --local', 'Use the local config file', false)\n    .action(async (options: { local: boolean }) => {\n      await handleLogin(options.local, true)\n    })\n}\n\nexport default createLogin\n", "import { getConfig } from '../../config.js'\nimport { handleLogin } from '../../login.js'\nimport { RagPoster } from '../../rag/rag-file-poster.js'\nimport { Command } from \"commander\"\n\nconst createRagPushCommand = (program:Command) => {\n  program\n    .command('push <path>')\n    .description('Push your RAG files to your SOUL ENGINE bucket.')\n    .option('-l, --local', 'use the local config file', false)\n    .action(async (ragPath, options: { local: boolean }) => {\n      const { local } = options\n      await handleLogin(local)\n      const globalConfig = await getConfig(local)\n  \n      const organization = globalConfig.get(\"organization\")\n      if (!organization) {\n        throw new Error(\"missing organization, even after login\")\n      }\n      \n      const defaultRagDir = ragPath.join(\".\", \"rag\")\n  \n      const ragDir = ragPath || defaultRagDir\n  \n      const poster = RagPoster.createWithDefaultConfig({\n        path: ragDir,\n        organization,\n        local: local,\n        apiKey: globalConfig.get(\"apiKey\"),\n      })\n  \n      try {\n        await poster.push()  \n      } catch (error) {\n        console.error(\"there was an error posting your RAG files:\", error)\n        throw error\n      }\n    })\n\n}\n\nexport default createRagPushCommand", "import path from \"node:path\"\n\nimport { getConfig } from '../../config.js'\nimport { handleLogin } from '../../login.js'\nimport { RagPoster } from '../../rag/rag-file-poster.js'\nimport { Command } from \"commander\"\n\nconst createRagWatch = (program: Command) => {\n  program\n    .command('watch <path>')\n    .description('Push your RAG files to your SOUL ENGINE bucket.')\n    .option('-l, --local', 'use the local config file', false)\n    .action(async (ragPath, options: { local: boolean }) => {\n      const { local } = options\n      await handleLogin(local)\n      const globalConfig = await getConfig(local)\n\n      const organization = globalConfig.get(\"organization\")\n      if (!organization) {\n        throw new Error(\"missing organization, even after login\")\n      }\n\n      const defaultRagDir = path.join(\".\", \"rag\")\n\n      const ragDir = ragPath || defaultRagDir\n\n      const poster = RagPoster.createWithDefaultConfig({\n        path: ragDir,\n        organization,\n        local: local,\n        apiKey: globalConfig.get(\"apiKey\"),\n        // root: ragDir\n      })\n\n      const keepAliveInterval = setInterval(() => {\n        // do nothing\n      }, 60 * 1000); // keep process alive\n\n      try {\n        poster.watch()\n\n        return new Promise<void>((resolve) => {\n          console.log(\"watching your rag files...\")\n          process.on('SIGINT', () => {\n            console.log('Received SIGINT. Exiting.');\n            clearInterval(keepAliveInterval);\n            resolve();\n          });\n        });\n      } catch (error) {\n        console.error(\"there was an error posting your RAG files:\", error)\n        throw error\n      }\n    })\n}\n\nexport default createRagWatch\n", "import { Command } from \"commander\";\nimport createRagPushCommand from \"./push.js\";\nimport createRagWatch from \"./watch.js\";\n\nconst createRagCommand = (program: Command) => {\n  const subCommand = program.command('rag')\n  createRagPushCommand(subCommand)\n  createRagWatch(subCommand)\n\n  return program\n}\n\nexport default createRagCommand\n", "import { Command } from 'commander'\nimport fsExtra from 'fs-extra/esm'\nimport { CommunityInstaller } from '../communityInstaller.js'\n\nconst createInstall = (program: Command) => {\n  program\n    .command('install')\n    .argument('<packagePath...>', 'The full path of the library package (eg cognitiveStep/externalDialog). You can specify multiple library packages.')\n    .option('-b,--branch <branch>', 'The branch to install from', \"main\")\n    .description('install a community package from the OPEN SOULS community library found here https://github.com/opensouls/community/tree/main/library')\n    .action(async (packagePaths: string[], { branch }: { branch: string }) => {\n      for (let packagePath of packagePaths) {\n        if (!(await fsExtra.pathExists(\"soul\"))) {\n          console.error(\"You must be in the root of a soul project to install a community package.\")\n          return\n        }\n\n        const installer = new CommunityInstaller(packagePath, branch)\n        await installer.install()\n      }\n    })\n}\n\nexport default createInstall\n", "import { $ } from 'execa'\nimport fsExtra from 'fs-extra/esm'\nimport { writeFile } from \"node:fs/promises\"\nimport { dirname, join } from \"node:path\"\n\nconst getCommunityRoot = (branch: string) => {\n  return `https://raw.githubusercontent.com/opensouls/community/${branch}/library/`\n}\n\nconst fetchCommunityContent = async (branch: string, path: string) => {\n  console.log(\"looking for path\", path)\n  const resp = await fetch(`https://api.github.com/repos/opensouls/community/contents/library/${path}?ref=${branch}`, {\n    headers: {\n      \"Accept\": \"application/vnd.github.v3+json\"\n    }\n  })\n  if (!resp.ok) {\n    console.error(\"Failed to fetch\", path, resp)\n    throw new Error(\"Failed to fetch: \" + path)\n  }\n  return resp.json()\n}\n\n// TODO (topper):\n// I think we can now generalize and just pull directory structures from the repo rather than having branching logic.\n\nexport class CommunityInstaller {\n  constructor(public userPath: string, public branch: string) { }\n\n  async install() {\n   \n    const directory = dirname(this.userPath)\n    switch (directory) {\n      case \"perceptionProcessors\":\n        return this.preprocessorInstall()\n      case \"pipelines\":\n        return this.pipelineInstall()\n      default:\n        return this.defaultInstall()\n    }\n  }\n\n  async defaultInstall() {\n    if (!this.userPath.endsWith(\".ts\")) {\n      this.userPath = this.userPath + \".ts\"\n    }\n    const data = await this.fetchFile(this.userPath)\n    const directory = dirname(this.userPath)\n\n    await fsExtra.mkdirp(join(\"soul\", directory))\n\n    const destinationPath = join(\"soul\", this.userPath)\n    await writeFile(destinationPath, data);\n    console.log(`${this.userPath} has been installed successfully to ${destinationPath}`);\n  }\n\n  async preprocessorInstall() {\n    if (!this.userPath.endsWith(\".ts\")) {\n      this.userPath = this.userPath + \".ts\"\n    }\n    const data = await this.fetchFile(this.userPath)\n    const destinationPath = join(\"soul\", \"perceptionProcessor.ts\")\n    await writeFile(destinationPath, data);\n    console.log(`${this.userPath} has been installed successfully to ${destinationPath}`);\n  }\n\n  async pipelineInstall() {\n    await $`npm install @opensouls/pipeline`\n    const directoryContents = await fetchCommunityContent(this.branch, this.userPath)\n    console.log(directoryContents)\n    await this.processPipelineDirectory(directoryContents, \".\")\n  }\n\n  async processPipelineDirectory(contents: any[], basePath: string) {\n    for (const item of contents) {\n      if (item.path === `library/${this.userPath}/README.md`) {\n        continue;\n      }\n      const localPath = join(basePath, item.path.replace(new RegExp(`^library/${this.userPath}`, \"i\"), ''));\n      if (item.type === 'file') {\n        const fileData = await fetch(item.download_url);\n        if (!fileData.ok) {\n          console.error(\"Failed to download file\", item.path);\n          continue;\n        }\n        const fileContent = await fileData.text();\n        await fsExtra.mkdirp(dirname(localPath));\n        await writeFile(localPath, fileContent);\n        console.log(`Remote ${item.path} written to ${localPath}`);\n      } else if (item.type === 'dir') {\n        const resp = await fetch(item.url, {\n          headers: {\n            \"Accept\": \"application/vnd.github.v3+json\"\n          }\n        })\n        if (!resp.ok) {\n          console.error(\"Failed to fetch directory\", item.path, resp.status, resp.statusText)\n          throw new Error(\"Failed to fetch directory: \" + item.path);\n        }\n        await this.processPipelineDirectory(await resp.json(), basePath);\n      }\n    }\n  }\n\n  private async fetchFile(path:string) {\n    const url = getCommunityRoot(this.branch) + path\n    const resp = await fetch(url)\n    if (!resp.ok) {\n      console.error(\"Failed to fetch package\", path)\n      throw new Error(\"Failed to fetch package: \" + path)\n    }\n\n    return resp.text()\n  }\n}", "import fsExtra from 'fs-extra/esm';\nimport { readFileSync, writeFileSync, readdirSync } from 'node:fs';\nimport path from 'node:path';\nimport { Manifest } from './types.js';\nimport { hashContent } from './hash.js';\n\nexport interface StorePullerOpts {\n  organizationSlug: string\n  local: boolean\n  apiKey: string\n  bucketName: string\n\n  blueprint?: string\n}\n\nexport class StorePuller {\n  constructor(public opts: StorePullerOpts) {}\n\n  async pull() {\n    const manifest = await this.fetchManifest()\n    const files = manifest.entries\n\n    await fsExtra.mkdirp(this.fileSystemPath())\n\n    for (const file of Object.values(files)) {\n      const filePath = path.join(this.fileSystemPath(), file.key)\n      if (fsExtra.pathExistsSync(filePath)) {\n        const fileContent = readFileSync(filePath, 'utf8')\n        // hash the file contents\n        const localHash = hashContent(fileContent)\n        if (localHash === file.contentHash) {\n          console.log(`File ${file.key} is up to date`)\n          continue\n        }\n      }\n      console.log(`fetching ${file.key}`)\n      // if the file is not up to date, then fetch the file from the server and update it locally\n      const resp = await this.fetchFile(file.key)\n      const data = await resp.text()\n      writeFileSync(filePath, data)\n    }\n    // next get the contents of the directory and delete anything not in the manifest\n    const localFiles = readdirSync(this.fileSystemPath())\n    for (const localFile of localFiles) {\n      if (!files[localFile]) {\n        console.log(`deleting ${localFile} -- ${path.join(this.fileSystemPath(), localFile)}`)\n        // fsExtra.removeSync(path.join(this.fileSystemPath(), localFile))\n      }\n    }\n\n    console.log(\"your store is up to date from the server\")\n  }\n\n  async fetchManifest() {\n    const { apiKey } = this.opts\n\n    const url = this.url()\n    const resp = await fetch(url, {\n      headers: {\n        \"Authorization\": `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/json\"\n      },\n    })\n    if (!resp.ok) {\n      console.error(\"Failed to fetch manifest\", this.opts.bucketName, { url: this.url(), response: resp.status, statusText: resp.statusText })\n      throw new Error(\"Failed to fetch manifest: \" + this.opts.bucketName)\n    }\n\n    return resp.json() as Promise<Manifest>\n  }\n\n  fetchFile(key: string) {\n    const { apiKey } = this.opts\n\n    const url = this.url() + \"/\" + key\n    return fetch(url, {\n      headers: {\n        \"Authorization\": `Bearer ${apiKey}`,\n      },\n    })\n  }\n\n  private fileSystemPath() {\n    if (this.opts.blueprint) {\n      return path.join('.', 'stores', this.opts.bucketName);\n    }\n    return path.join('.', 'stores', 'organization', this.opts.bucketName);\n  }\n\n  private url() {\n    const { organizationSlug, local } = this.opts\n\n    const rootUrl = local ? \"http://localhost:4000/api\" : \"https://servers.souls.chat/api\"\n\n    if (this.opts.blueprint) {\n      return `${rootUrl}/${organizationSlug}/stores/${this.opts.blueprint}/${this.opts.bucketName}`\n    }\n\n    return `${rootUrl}/${organizationSlug}/stores/${this.opts.bucketName}`\n  }\n\n\n}", "import { createHash } from \"node:crypto\";\n\nexport const hashContent = (data: string | Buffer) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n}\n", "import { Command } from \"commander\";\nimport { handleLogin } from \"../../login.js\";\nimport { getConfig } from \"../../config.js\";\nimport { StorePuller } from \"../../stores/pull.js\";\nimport { parsedPackageJson } from \"../../packageParser.js\";\n\nconst createStoresPullCommand = (program: Command) => {\n  program\n    .command('pull <bucketName>')\n    .description('Pull a specific bucket from the store. This can be in the format `:bucketName` for blueprint stores or `organization/:bucketName` for organization stores.')\n    .option('-l, --local', 'Use the local configuration', false)\n    .action(async (bucketName, options: { local: boolean }) => {\n      const { local } = options;\n      console.log(`Pulling blueprint store '${bucketName}' from the store.`);\n\n      await handleLogin(local)\n      const globalConfig = await getConfig(local)\n\n      const organizationSlug = globalConfig.get(\"organization\")\n      if (!organizationSlug) {\n        throw new Error(\"missing organization, even after login\")\n      }\n\n      if (bucketName.startsWith(\"organization/\")) {\n        const puller = new StorePuller(\n          {\n            organizationSlug,\n            apiKey: globalConfig.get(\"apiKey\"),\n            local,\n            bucketName: bucketName.split(\"/\")[1],\n          },\n        )\n\n        return await puller.pull()\n      }\n\n      const blueprint = parsedPackageJson().name\n\n      const puller = new StorePuller(\n        {\n          organizationSlug,\n          apiKey: globalConfig.get(\"apiKey\"),\n          local,\n          blueprint,\n          bucketName,\n        },\n      )\n\n      await puller.pull()\n    });\n}\n\nexport default createStoresPullCommand;\n\n", "import { readFileSync, readdirSync } from 'node:fs';\nimport path from 'node:path';\nimport { Manifest } from './types.js';\nimport { hashContent } from './hash.js';\n\nexport interface StorePusherOpts {\n  organizationSlug: string\n  local: boolean\n  apiKey: string\n  bucketName: string\n\n  blueprint?: string\n}\n\nexport class StorePusher {\n  constructor(public opts: StorePusherOpts) {}\n\n  async push() {\n    const manifest = await this.fetchManifest()\n    const files = manifest.entries\n\n    const localFiles = readdirSync(this.fileSystemPath())\n\n    for (const localFile of localFiles) {\n      const filePath = path.join(this.fileSystemPath(), localFile)\n      const fileContent = readFileSync(filePath, 'utf-8')\n      const localHash = hashContent(fileContent)\n\n      if (!files[localFile] || files[localFile].contentHash !== localHash) {\n        console.log(`pushing ${localFile}`)\n        await this.pushFile(localFile, fileContent)\n      }\n    }\n\n    // Delete files from the server not present locally\n    for (const fileKey in files) {\n      if (!localFiles.includes(fileKey)) {\n        console.log(`deleting ${fileKey} from server`)\n        await this.deleteFile(fileKey)\n      }\n    }\n\n    console.log(\"your store is up to date on the server\")\n  }\n\n  async fetchManifest() {\n    const { apiKey } = this.opts\n\n    const url = this.url()\n    const resp = await fetch(url, {\n      headers: {\n        \"Authorization\": `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/json\"\n      },\n    })\n    if (!resp.ok) {\n      console.error(\"Failed to fetch manifest\", this.opts.bucketName, { url: this.url(), response: resp.status, statusText: resp.statusText })\n      throw new Error(\"Failed to fetch manifest: \" + this.opts.bucketName)\n    }\n\n    return resp.json() as Promise<Manifest>\n  }\n\n  pushFile(key: string, content: string) {\n    const { apiKey } = this.opts\n\n    const url = this.url()\n    return fetch(url, {\n      method: 'POST',\n      headers: {\n        \"Authorization\": `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ \n        key,\n        content,\n      }),\n    })\n  }\n\n  deleteFile(key: string) {\n    const { apiKey } = this.opts\n\n    const url = this.url() + \"/\" + key\n    return fetch(url, {\n      method: 'DELETE',\n      headers: {\n        \"Authorization\": `Bearer ${apiKey}`,\n      },\n    })\n  }\n\n  private fileSystemPath() {\n    if (this.opts.blueprint) {\n      return path.join('.', 'stores', this.opts.bucketName);\n    }\n    return path.join('.', 'stores', 'organization', this.opts.bucketName);\n  }\n\n  private url() {\n    const { organizationSlug, local } = this.opts\n\n    const rootUrl = local ? \"http://localhost:4000/api\" : \"https://servers.souls.chat/api\"\n\n    if (this.opts.blueprint) {\n      return `${rootUrl}/${organizationSlug}/stores/${this.opts.blueprint}/${this.opts.bucketName}`\n    }\n\n    return `${rootUrl}/${organizationSlug}/stores/${this.opts.bucketName}`\n  }\n}\n", "import { Command } from \"commander\";\nimport { handleLogin } from \"../../login.js\";\nimport { getConfig } from \"../../config.js\";\nimport { StorePusher } from \"../../stores/push.js\";\nimport { parsedPackageJson } from \"../../packageParser.js\";\n\nconst createStoresPushCommand = (program: Command) => {\n  program\n    .command('push <bucketName>')\n    .description('Push a specific bucket to the store. This can be in the format `:bucketName` for blueprint stores or `organization/:bucketName` for organization stores.')\n    .option('-l, --local', 'Use the local configuration', false)\n    .action(async (bucketName, options: { local: boolean }) => {\n      const { local } = options;\n      console.log(`Pushing blueprint store '${bucketName}' to the store.`);\n\n      await handleLogin(local)\n      const globalConfig = await getConfig(local)\n\n      const organizationSlug = globalConfig.get(\"organization\")\n      if (!organizationSlug) {\n        throw new Error(\"missing organization, even after login\")\n      }\n\n      if (bucketName.startsWith(\"organization/\")) {\n        const pusher = new StorePusher(\n          {\n            organizationSlug,\n            apiKey: globalConfig.get(\"apiKey\"),\n            local,\n            bucketName: bucketName.split(\"/\")[1],\n          },\n        )\n\n        return await pusher.push()\n      }\n\n      const blueprint = parsedPackageJson().name\n\n      const pusher = new StorePusher(\n        {\n          organizationSlug,\n          apiKey: globalConfig.get(\"apiKey\"),\n          local,\n          blueprint,\n          bucketName,\n        },\n      )\n\n      await pusher.push()\n    });\n}\n\nexport default createStoresPushCommand;\n", "import { Command } from \"commander\";\nimport createStoresPullCommand from \"./pull.js\";\nimport createStoresPushCommand from \"./push.js\";\n\n\nconst createStoreCommand = (program: Command) => {\n  const subCommand = program.command('stores')\n  createStoresPullCommand(subCommand)\n  createStoresPushCommand(subCommand)\n  \n  return program\n}\n\nexport default createStoreCommand\n", "import fetch from 'node-fetch';\n\nclass CustomModelManager {\n  private local: boolean;\n  private globalConfig: any;\n  private organizationSlug: string;\n  private rootUrl: string;\n\n  constructor(local: boolean, organizationSlug: string, apiKey: string) {\n    this.local = local;\n    this.organizationSlug = organizationSlug;\n    this.globalConfig = { get: (key: string) => key === \"apiKey\" ? apiKey : null };\n    this.rootUrl = this.local ? \"http://localhost:4000/api\" : \"https://servers.souls.chat/api\";\n  }\n\n  public async listModels() {\n    const url = `${this.rootUrl}/${this.organizationSlug}/customProcessors`;\n\n    try {\n      const response = await fetch(url, {\n        headers: {\n          \"Authorization\": `Bearer ${this.globalConfig.get(\"apiKey\")}`,\n          \"Content-Type\": \"application/json\"\n        },\n      });\n\n      if (!response.ok) {\n        console.error(\"Failed to fetch custom processors\", { url, response: response.status, statusText: response.statusText });\n        return;\n      }\n\n      const processors = await response.json();\n      return processors\n    } catch (error) {\n      console.error(\"Error fetching custom processors:\", error);\n    }\n  }\n\n  public async createModel(modelData: any) {\n    const url = `${this.rootUrl}/${this.organizationSlug}/customProcessors`;\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          \"Authorization\": `Bearer ${this.globalConfig.get(\"apiKey\")}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(modelData)\n      });\n\n      if (!response.ok) {\n        console.error(\"Failed to create custom model\", { url, response: response.status, statusText: response.statusText });\n        return;\n      }\n\n      const newProcessor = await response.json();\n      return newProcessor\n    } catch (error) {\n      console.error(\"Error creating custom processor:\", error);\n    }\n  }\n}\n\nexport default CustomModelManager;\n", "import { Command } from \"commander\";\nimport { handleLogin } from \"../../login.js\";\nimport { getConfig } from \"../../config.js\";\nimport CustomModelManager from \"../../customModels/customModel.js\";\nimport Table from 'cli-table3'\n\nconst createListModelsCommand = (program: Command) => {\n  program\n    .command('list')\n    .description('List custom models for the organization')\n    .option('-l, --local', '(Soul Engine Dev Only) Use a local soul engine instance instead of production', false)\n    .action(async ({ local }) => {\n      console.log(`Listing custom models for the organization.`);\n\n      await handleLogin(local)\n      const globalConfig = await getConfig(local)\n\n      const organizationSlug = globalConfig.get(\"organization\")\n      if (!organizationSlug) {\n        throw new Error(\"missing organization, even after login\")\n      }\n\n      const customModelManager = new CustomModelManager(local, organizationSlug, globalConfig.get(\"apiKey\"));\n      const models = await customModelManager.listModels();\n\n      const table = new Table({\n        head: [\"Name\", \"API Endpoint\", \"Model Name\"]\n      })\n      table.push(...models.map((model: any) => [model.name, model.api_endpoint, model.model_name]))\n\n      console.log(table.toString())\n    });\n\n  return program;\n}\n\nexport default createListModelsCommand;\n", "import { Command } from \"commander\";\nimport inquirer from \"inquirer\";\nimport { handleLogin } from \"../../login.js\";\nimport { getConfig } from \"../../config.js\";\nimport CustomModelManager from \"../../customModels/customModel.js\";\n\nconst createCreateModelCommand = (program: Command) => {\n  program\n    .command('create')\n    .description('Create a custom model for the organization')\n    .option('-l, --local', '(Soul Engine dev only) use a local soul engine server', false)\n    .action(async ({ local }) => {\n      console.log(`Creating a custom model for the organization.`);\n\n      await handleLogin(local);\n      const globalConfig = await getConfig(local);\n\n      const organizationSlug = globalConfig.get(\"organization\");\n      if (!organizationSlug) {\n        throw new Error(\"missing organization, even after login\");\n      }\n\n      const answers = await inquirer.prompt([\n        {\n          type: 'input',\n          name: 'name',\n          message: \"The name of your custom model. This is the name you'll use to access the model.\",\n        },\n        {\n          type: 'input',\n          name: 'apiEndpoint',\n          message: 'The baseUrl for the model (eg https://api.fireworks.ai/inference/v1 )',\n        },\n        {\n          type: 'password',\n          name: 'apiKey',\n          message: 'The API key for the model',\n        },\n        {\n          type: 'input',\n          name: 'modelName',\n          message: \"What is the provider's model name? (eg. 'gpt-4o')\",\n        },\n\n        {\n          type: 'confirm',\n          name: 'confirmCreation',\n          message: 'Do you want to create this model?',\n          default: false,\n        },\n      ]);\n\n      const customModelManager = new CustomModelManager(local, organizationSlug, globalConfig.get(\"apiKey\"));\n      const newModel = await customModelManager.createModel(answers);\n      console.log('New model created:', newModel);\n    });\n\n  return program;\n}\n\nexport default createCreateModelCommand;\n", "import { Command } from \"commander\";\nimport createListModelsCommand from \"./list.js\";\nimport createCreateModelCommand from \"./createModel.js\";\n\nconst createCustomModelCommand = (program: Command) => {\n  const subCommand = program.command('custom-models');\n  createListModelsCommand(subCommand);\n  createCreateModelCommand(subCommand);\n  return program;\n}\n\nexport default createCustomModelCommand;\n", "import { Command } from \"commander\";\nimport createApiKeyCommand from \"./apikey.js\";\nimport createDev from \"./dev.js\";\nimport createInit from \"./init.js\";\nimport createLogout from \"./logout.js\";\nimport createLogin from \"./login.js\";\nimport createRagCommand from \"./rag/index.js\";\nimport createInstall from \"./install.js\";\nimport createStoreCommand from \"./stores/index.js\";\nimport createCustomModelCommand from \"./custom-models/index.js\";\n\nexport const setupCLI = (program: Command) => {\n  createApiKeyCommand(program);\n  createDev(program);\n  createInit(program);\n  createLogin(program);\n  createLogout(program);\n  createRagCommand(program);\n  createStoreCommand(program);\n  createInstall(program);\n  createCustomModelCommand(program);\n}\n"],
  "mappings": "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",
  "names": ["existsSync", "readFileSync", "path", "process", "path", "fetch", "fs", "readFileSync", "join", "fs", "path", "join", "path", "join", "readFileSync", "fs", "fetch", "path", "existsSync", "readFileSync", "resolve", "readFileSync", "join", "dirname", "dirname", "join", "$", "readFileSync", "path", "path", "fsExtra", "fsExtra", "dirname", "join", "path", "fsExtra", "fsExtra", "readFileSync", "writeFileSync", "readdirSync", "path", "fsExtra", "path", "readFileSync", "writeFileSync", "readdirSync", "puller", "readFileSync", "readdirSync", "path", "readdirSync", "path", "readFileSync", "pusher", "push_default", "push_default", "fetch"]
}
