import { Observer } from "./observer";
export declare const $skipreactive: unique symbol;
export declare const $reactive: unique symbol;
export declare const $reactiveproxy: unique symbol;
declare type Admin<T> = {
    connections: {
        iterate: Set<Observer>;
        byKey: Map<string | number, Set<Observer>>;
    };
    proxy: InternalObservable<T>;
    proxiesWithImplicitObserver: Map<Observer, InternalObservable<T>>;
    raw: T;
    shallow: boolean;
};
export declare type InternalObservable<T> = {
    [$reactive]: Admin<T>;
} & T;
export declare function isReactive<T>(object: T, implicitObserver?: Observer): object is InternalObservable<T>;
export declare function markRaw<T>(object: T): T;
export declare type ObserverConnectionSource<T> = {
    observable: InternalObservable<T>;
} & ({
    key: string | number;
    type: "has" | "get";
} | {
    type: "iterate";
});
export declare type ObserverConnection<T> = {
    source: ObserverConnectionSource<T>;
    observer: Observer;
};
export declare type Operation<T> = {
    observable: InternalObservable<T>;
    key: string | number;
} & ({
    value: any;
    type: "add";
} | {
    type: "update";
    value: any;
    oldValue: any;
} | {
    type: "delete";
    oldValue: any;
});
declare function observable<T>(object: T, implicitObserver?: Observer, shallow?: boolean): T;
export declare const reactive: typeof observable;
export {};
